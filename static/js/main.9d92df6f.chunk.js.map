{"version":3,"sources":["TodoList/TodoList.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","props","todos","sort","type","onClick","map","todo","key","id","user","name","title","completed","getTodo","a","fetch","then","res","json","getUser","App","useState","setTodo","isLoad","setLoad","length","Promise","all","response","item","find","person","userId","catch","typeOfSort","newTodo","b","localeCompare","Number","ReactDOM","render","document","getElementById"],"mappings":"sOAQaA,G,MAAsB,SAACC,GAAW,IACrCC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KAEf,OACE,oCACE,4BACEC,KAAK,SACLC,QAAS,kBAAMF,EAAK,cAFtB,iBAMA,4BACEC,KAAK,SACLC,QAAS,kBAAMF,EAAK,kBAFtB,qBAMA,4BACEC,KAAK,SACLC,QAAS,kBAAMF,EAAK,aAFtB,gBAMA,+BACE,+BACE,4BACE,oCAGA,qCAGA,2CAKJ,+BACGD,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACZ,4BACGF,EAAKG,KAAKC,MAEb,4BACGJ,EAAKK,OAER,4BACGL,EAAKM,UAAY,QAAU,uB,uBCvDrC,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EACEC,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WADtE,4C,sBAIA,SAAeC,IAAtB,+B,4CAAO,sBAAAL,EAAA,+EACEC,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WADtE,4C,sBCMP,IAsEeE,EAtEC,WAAO,IAAD,EACKC,mBAAyB,IAD9B,mBACbpB,EADa,KACNqB,EADM,OAEMD,qBAFN,mBAEbE,EAFa,KAELC,EAFK,KA8CpB,OAAqB,IAAjBvB,EAAMwB,OAEN,6BACE,4BACEtB,KAAK,SACLC,QA/CS,WACfoB,GAAQ,GACRE,QAAQC,IAAI,CAACd,IAAWM,MACrBH,MAAK,SAAAY,GACJ,IAAMtB,EAAOsB,EAAS,GAAGvB,KAAI,SAAAwB,GAAI,sBAC5BA,EAD4B,CAE/BpB,KAAMmB,EAAS,GAAGE,MAAK,SAAAC,GAAM,OAAIA,EAAOvB,KAAOqB,EAAKG,eAGtDV,EAAQhB,MAET2B,OAAM,WACLT,GAAQ,QAiCR,aAMA,2BAAID,EAAS,aAAe,KAMhC,oCACE,kBAAC,EAAD,CACEtB,MAAOA,EACPC,KA5CO,SAACgC,GACZ,IAAMC,EAAO,YAAOlC,GAEpB,OAAQiC,GACN,IAAK,WACHC,EAAQjC,MAAK,SAACY,EAAGsB,GAAJ,OAAUtB,EAAEH,MAAM0B,cAAcD,EAAEzB,UAC/C,MAGF,IAAK,eACHwB,EAAQjC,MAAK,SAACY,EAAGsB,GAAJ,OAAUE,OAAOF,EAAExB,WAAa0B,OAAOxB,EAAEF,cACtD,MAGF,IAAK,UACHuB,EAAQjC,MAAK,SAACY,EAAGsB,GAAJ,OAAUtB,EAAEL,KAAKC,KAAK2B,cAAcD,EAAE3B,KAAKC,SAQ5DY,EAAQa,QCjDZI,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9d92df6f.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { TodoWithUser } from '../api';\n\ninterface Props {\n  todos: TodoWithUser[];\n  sort(string: string): void;\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos, sort } = props;\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => sort('by title')}\n      >\n      Sort by title\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => sort('by completed')}\n      >\n      Sort by completed\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => sort('by name')}\n      >\n      Sort by name\n      </button>\n      <table>\n        <thead>\n          <tr>\n            <th>\n              USER\n            </th>\n            <th>\n              TITLE\n            </th>\n            <th>\n              COMPLETED\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(todo => (\n            <tr key={todo.id}>\n              <td>\n                {todo.user.name}\n              </td>\n              <td>\n                {todo.title}\n              </td>\n              <td>\n                {todo.completed ? 'Doned' : 'In process'}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n    </>\n  );\n};\n","export async function getTodo(): Promise<Todo[]> {\n  return fetch('https://jsonplaceholder.typicode.com/todos').then(res => res.json());\n}\n\nexport async function getUser(): Promise<User[]> {\n  return fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json());\n}\n\nexport interface Todo {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n}\n\nexport interface TodoWithUser extends Todo {\n  user: User;\n}\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { TodoList } from './TodoList/TodoList';\nimport {\n  getTodo,\n  getUser,\n  TodoWithUser,\n  User,\n} from './api';\n\nconst App: FC = () => {\n  const [todos, setTodo] = useState<TodoWithUser[]>([]);\n  const [isLoad, setLoad] = useState<boolean>();\n\n  const loadTodo = () => {\n    setLoad(true);\n    Promise.all([getTodo(), getUser()])\n      .then(response => {\n        const todo = response[0].map(item => ({\n          ...item,\n          user: response[1].find(person => person.id === item.userId) as User,\n        }));\n\n        setTodo(todo);\n      })\n      .catch(() => {\n        setLoad(false);\n      });\n  };\n\n  const sort = (typeOfSort: string) => {\n    const newTodo = [...todos];\n\n    switch (typeOfSort) {\n      case 'by title': {\n        newTodo.sort((a, b) => a.title.localeCompare(b.title));\n        break;\n      }\n\n      case 'by completed': {\n        newTodo.sort((a, b) => Number(b.completed) - Number(a.completed));\n        break;\n      }\n\n      case 'by name': {\n        newTodo.sort((a, b) => a.user.name.localeCompare(b.user.name));\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    setTodo(newTodo);\n  };\n\n  if (todos.length === 0) {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={loadTodo}\n        >\n            Load todo\n        </button>\n        <p>{isLoad ? 'Loading...' : ''}</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <TodoList\n        todos={todos}\n        sort={sort}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}